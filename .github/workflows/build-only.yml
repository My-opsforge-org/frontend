name: Build Frontend Only

on:
  push:
    branches:
      - master
  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci
        working-directory: ./

      - name: Install Nginx and SSL tools
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "\
            sudo apt-get update && \
            sudo apt-get install -y nginx certbot python3-certbot-nginx \
          "

      - name: Deploy SSL certificates
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "\
            sudo mkdir -p /etc/ssl/opsforge.me && \
            echo '${{ secrets.SSL_CERTIFICATE }}' | sudo tee /etc/ssl/opsforge.me/opsforge.me.crt > /dev/null && \
            echo '${{ secrets.SSL_PRIVATE_KEY }}' | sudo tee /etc/ssl/opsforge.me/opsforge.me.key > /dev/null && \
            sudo chmod 600 /etc/ssl/opsforge.me/opsforge.me.key && \
            sudo chmod 644 /etc/ssl/opsforge.me/opsforge.me.crt \
          "

      - name: Configure Nginx with SSL for Frontend
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "\
            sudo tee /etc/nginx/sites-available/opsforge.me > /dev/null << 'EOF'
          server {
              listen 80;
              server_name opsforge.me www.opsforge.me;
              return 301 https://\$server_name\$request_uri;
          }

          server {
              listen 443 ssl http2;
              server_name opsforge.me www.opsforge.me;

              ssl_certificate /etc/ssl/opsforge.me/opsforge.me.crt;
              ssl_certificate_key /etc/ssl/opsforge.me/opsforge.me.key;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
              ssl_prefer_server_ciphers off;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 10m;

              # Frontend (React app)
              location / {
                  root /home/${{ secrets.VM_USER }}/frontend/build;
                  try_files \$uri \$uri/ /index.html;
                  add_header Cache-Control 'no-cache, no-store, must-revalidate';
                  add_header Pragma 'no-cache';
                  add_header Expires '0';
                  
                  # Security headers
                  add_header X-Frame-Options 'SAMEORIGIN' always;
                  add_header X-Content-Type-Options 'nosniff' always;
                  add_header X-XSS-Protection '1; mode=block' always;
                  add_header Referrer-Policy 'strict-origin-when-cross-origin' always;
              }

              # Backend API (if backend is on same server)
              location /api/ {
                  proxy_pass http://localhost:5002;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }

              # Health check
              location /health {
                  proxy_pass http://localhost:5002/api/health;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }

              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_proxied any;
              gzip_comp_level 6;
              gzip_types
                  text/plain
                  text/css
                  text/xml
                  text/javascript
                  application/json
                  application/javascript
                  application/xml+rss
                  application/atom+xml
                  image/svg+xml;
          }
          EOF

          sudo ln -sf /etc/nginx/sites-available/opsforge.me /etc/nginx/sites-enabled/ && \
          sudo rm -f /etc/nginx/sites-enabled/default && \
          sudo nginx -t && \
          sudo systemctl reload nginx \
          "

      - name: Build React app
        run: npm run build
        working-directory: ./
        env:
          # Backend Server Configuration
          REACT_APP_BACKEND_URL: ${{ secrets.BACKEND_URL }}
          
          # Client Configuration
          REACT_APP_CLIENT_URL: ${{ secrets.FRONTEND_URL }}
          
          # Environment
          NODE_ENV: production
          
          # Build Configuration
          GENERATE_SOURCEMAP: false
          REACT_APP_VERSION: 1.0.0
          
          # Debug Configuration
          REACT_APP_DEBUG: false
          REACT_APP_LOG_LEVEL: error
          
          # Feature Flags
          REACT_APP_ENABLE_SOCKET_IO: true
          REACT_APP_ENABLE_REAL_TIME_CHAT: true
          REACT_APP_ENABLE_AVATAR_CHAT: true
          REACT_APP_ENABLE_COMMUNITY_CHAT: true
          
          # External Services
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          REACT_APP_GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}
          
          # Firebase Configuration
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Verify build directory exists
        run: |
          if [ ! -d "build" ]; then
            echo "ERROR: Build directory does not exist!"
            echo "Current directory contents:"
            ls -la
            exit 1
          else
            echo "Build directory exists and contains:"
            ls -la build/
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: build/
          retention-days: 7

      - name: Build Summary
        run: |
          echo "🎉 Frontend build completed successfully!"
          echo "📁 Build files are available as artifacts"
          echo "📦 Total build size: $(du -sh build/ | cut -f1)"
          echo ""
          echo "Next steps:"
          echo "1. Download the build artifacts"
          echo "2. Deploy manually when VM is accessible"
          echo "3. Or use the full deployment workflow when SSH issues are resolved"

# Required secrets:
# VM_HOST: The public IP of your Azure VM (from Terraform output)
# VM_USER: The admin username for your VM (e.g., azureuser)
# VM_PASSWORD: The admin password for your VM
# SSL_CERTIFICATE: Your SSL certificate (PEM format) - content of opsforge.me.crt
# SSL_PRIVATE_KEY: Your SSL private key (PEM format) - content of opsforge.me.key
# BACKEND_URL: Your backend API base URL
# FRONTEND_URL: Your frontend URL
# GOOGLE_MAPS_API_KEY: Your Google Maps API key
# GOOGLE_PLACES_API_KEY: Your Google Places API key
# FIREBASE_API_KEY: Your Firebase API key
# FIREBASE_AUTH_DOMAIN: Your Firebase auth domain
# FIREBASE_PROJECT_ID: Your Firebase project ID
# FIREBASE_STORAGE_BUCKET: Your Firebase storage bucket
# FIREBASE_MESSAGING_SENDER_ID: Your Firebase messaging sender ID
# FIREBASE_APP_ID: Your Firebase app ID
# FIREBASE_MEASUREMENT_ID: Your Firebase measurement ID

# SSL Features:
# - Automatically configures HTTPS if SSL secrets are provided
# - Redirects HTTP to HTTPS
# - Uses modern SSL protocols (TLS 1.2/1.3)
# - Secure cipher configuration
# - Gzip compression for better performance
# - Security headers for enhanced protection
