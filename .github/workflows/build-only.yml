name: Build Frontend Only

on:
  push:
    branches:
      - master
  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci
        working-directory: ./

      - name: Build React app
        run: npm run build
        working-directory: ./
        env:
          # Backend Server Configuration
          REACT_APP_BACKEND_URL: ${{ secrets.BACKEND_URL }}
          
          # Client Configuration
          REACT_APP_CLIENT_URL: ${{ secrets.FRONTEND_URL }}
          
          # Environment
          NODE_ENV: production
          
          # Build Configuration
          GENERATE_SOURCEMAP: false
          REACT_APP_VERSION: 1.0.0
          
          # Debug Configuration
          REACT_APP_DEBUG: false
          REACT_APP_LOG_LEVEL: error
          
          # Feature Flags
          REACT_APP_ENABLE_SOCKET_IO: true
          REACT_APP_ENABLE_REAL_TIME_CHAT: true
          REACT_APP_ENABLE_AVATAR_CHAT: true
          REACT_APP_ENABLE_COMMUNITY_CHAT: true
          
          # External Services
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          REACT_APP_GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}
          
          # Firebase Configuration
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Verify build directory exists
        run: |
          if [ ! -d "build" ]; then
            echo "ERROR: Build directory does not exist!"
            echo "Current directory contents:"
            ls -la
            exit 1
          else
            echo "Build directory exists and contains:"
            ls -la build/
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: build/
          retention-days: 7

      - name: Build Summary
        run: |
          echo "üéâ Frontend build completed successfully!"
          echo "üìÅ Build files are available as artifacts"
          echo "üì¶ Total build size: $(du -sh build/ | cut -f1)"
          echo ""
          echo "Next steps:"
          echo "1. Download the build artifacts"
          echo "2. Deploy manually when VM is accessible"
          echo "3. Or use the full deployment workflow when SSH issues are resolved"
